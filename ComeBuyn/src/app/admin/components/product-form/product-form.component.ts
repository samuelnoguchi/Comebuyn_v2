import { Component, OnInit, ViewChild } from '@angular/core';
import { CategoryService } from 'shared/services/category.service';
import { ProductService } from 'shared/services/product.service';
import { Router, ActivatedRoute } from '@angular/router';
import 'rxjs/add/operator/take'; // Use to take 1 value, dont need to unsubscribe after
import { Product } from 'shared/models/product';

@Component({
  selector: 'app-product-form',
  templateUrl: './product-form.component.html',
  styleUrls: ['./product-form.component.css']
})
export class ProductFormComponent implements OnInit {

  id;
  categories$;
  product:Product={
    $key:null,
    category:null,
    numBuyers:null,
    description:null,
    numBuyersRequired:null,
    buyers: {},
    tags: {},
    price:null,
    originalPrice:null,
    imageUrl:null,
    images: {},
    title:null
  };

  tags: {};
  tagsList:[] = [];

  images =  new Array(3).fill(null);
  
  constructor(
    private categoryService: CategoryService,
    private productService: ProductService,
    private router: Router,
    private route: ActivatedRoute) { 
    this.categories$ = categoryService.getAll();

    this.id = this.route.snapshot.paramMap.get('id');
    if (this.id) this.productService.get(this.id).valueChanges().take(1)
      .subscribe(p=> {
        this.product = p;
        this.tags = p.tags;

        //Set images
        if(p.images){
          let imageNum = 0;
          for (let image of Object.values(p.images)){
            this.images[imageNum] = image;
            imageNum++;
          }
        }
      });
  }

  getTags(tags: []){
    this.tagsList = tags;
  }

  generateTagObject(product){
    let obj = {};
    let numTags = 0;
    let tagsSet: Set<string> = new Set();
    // Generate user input tags
    for (let tag of this.tagsList){
      let tagKey:string = 'tag' + numTags;
      let tagName:string = tag['name'];
      tagsSet.add(tagName);
      
      obj[tagKey] = tagName;
      numTags++;
    }

    // Generate tags based on name
    for (let word of product.title.toLowerCase().split(" ")){
      if (!tagsSet.has(word)){
        let tagKey:string = 'tag' + numTags;
        obj[tagKey] = word.toLowerCase();
        numTags++;
      }
    }
    this.tags = obj;
  }

  generateImagesObject(){
    let imageObj = {};
    let numImages = 0;
    for(let image of this.images){
      if(image){
        let imageKey:string = 'image' + numImages;
        imageObj[imageKey] = image;
        numImages++;
      }
    }
    return imageObj;
  }

  getImage(image: string, imageNumber: number){
    this.images[imageNumber] = image;
  }

  // Takes json object generated by ngForm
  save(product) {
    //Generate tag object of proper form for db
    this.generateTagObject(product);
    product.tags = this.tags;
    product.images = this.generateImagesObject();
    product.imageUrl = this.images[0];

    if(this.id) this.productService.update(this.id, product); // If we are editing a product, call the update method
    else this.productService.create(product); // Otherwise call the create method
    this.router.navigate(['/admin/products']);
  }

  delete(){
    if(!confirm('Are you sure you want to delete this product?')) return; 
      
    this.productService.delete(this.id);
    this.router.navigate(['/admin/products']);
  }

  ngOnInit() {
  }

}
